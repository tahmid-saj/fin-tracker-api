# queries
type Query {
  # user sign in
  insurancesByUser(userId: String!, email: String!): [UserInsurance]
  insurancesSummaryByUser(userId: String!, email: String!): UserInsurancesSummary
}

# mutations
type Mutation {
  # insurances operations
  createUserInsurance(userId: String!, email: String!, insuranceInfo: InsuranceInfo!): Boolean
  deleteUserInsurance(userId: String!, email: String!, removingInsuranceFor: String!): Boolean
  updateUserInsurances(userId: String!, email: String!, insurances: [InsuranceInfo]!): Boolean
  updateUserInsurancesSummary(userId: String!, email: String!, insurancesSummary: InsurancesSummaryInfo!): Boolean
}

# inputs
input InsuranceInfo {
  insuranceFor: String!
  insurancePayment: Float!
  insuranceInterval: String!
  insuranceFirstPaymentDate: String!
  insuranceEndDate: String!
}

input InsurancesSummaryInfo {
  currentTotalInsurancePlanned: Float!
}

# types
type UserInsurance {
  userId: String!
  email: String!
  insuranceFor: String!
  insurancePayment: Float!
  insuranceInterval: String!
  insuranceFirstPaymentDate: String!
  insuranceEndDate: String!
}

type UserInsurancesSummary {
  userId: String!
  email: String!
  currentTotalInsurancePlanned: Float!
}